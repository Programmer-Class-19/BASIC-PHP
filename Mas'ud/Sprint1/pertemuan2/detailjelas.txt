Operator logika dalam PHP digunakan untuk melakukan operasi logika pada nilai boolean. Operator-operator ini sering digunakan dalam pernyataan kondisional untuk menggabungkan atau membandingkan ekspresi logika. Berikut adalah daftar operator logika dalam PHP dengan contoh penggunaan yang melibatkan angka:

Operator Logika
AND (&& atau and)

Menghasilkan true jika kedua operand bernilai true.
Contoh:
php
Salin kode
$a = 5;
$b = 10;

// Menggunakan &&
var_dump($a > 0 && $b > 0); // bool(true)
var_dump($a > 10 && $b > 0); // bool(false)

// Menggunakan and
var_dump($a > 0 and $b > 0); // bool(true)
var_dump($a > 10 and $b > 0); // bool(false)
OR (|| atau or)

Menghasilkan true jika salah satu atau kedua operand bernilai true.
Contoh:
php
Salin kode
$a = 5;
$b = 10;

// Menggunakan ||
var_dump($a > 0 || $b > 0); // bool(true)
var_dump($a > 10 || $b > 0); // bool(true)
var_dump($a > 10 || $b > 20); // bool(false)

// Menggunakan or
var_dump($a > 0 or $b > 0); // bool(true)
var_dump($a > 10 or $b > 0); // bool(true)
var_dump($a > 10 or $b > 20); // bool(false)
NOT (!)

Membalikkan nilai boolean dari operand.
Contoh:
php
Salin kode
$a = 5;

// Menggunakan !
var_dump(!($a > 0)); // bool(false)
var_dump(!($a > 10)); // bool(true)
XOR (xor)

Menghasilkan true jika salah satu operand bernilai true tapi tidak keduanya.
Contoh:
php
Salin kode
$a = 5;
$b = 10;

// Menggunakan xor
var_dump($a > 0 xor $b > 0); // bool(false)
var_dump($a > 0 xor $b > 10); // bool(true)
var_dump($a > 10 xor $b > 0); // bool(true)
var_dump($a > 10 xor $b > 20); // bool(false)
Contoh Penggunaan Operator Logika dalam PHP
php
Salin kode
<?php
$a = 5;
$b = 10;
$c = -5;
$d = 0;

// AND (&& atau and)
echo "Contoh AND:\n";
var_dump($a > 0 && $b > 0); // bool(true)
var_dump($a > 10 && $b > 0); // bool(false)

// OR (|| atau or)
echo "\nContoh OR:\n";
var_dump($a > 0 || $c > 0); // bool(true)
var_dump($c > 0 || $d > 0); // bool(false)

// NOT (!)
echo "\nContoh NOT:\n";
var_dump(!($a > 0)); // bool(false)
var_dump(!($c > 0)); // bool(true)

// XOR (xor)
echo "\nContoh XOR:\n";
var_dump($a > 0 xor $b > 0); // bool(false)
var_dump($a > 0 xor $d > 0); // bool(true)
var_dump($c > 0 xor $d > 0); // bool(false)
?>
Penjelasan
&& atau and: Mengembalikan true jika kedua operand true.
|| atau or: Mengembalikan true jika salah satu operand true.
!: Mengembalikan kebalikan dari nilai boolean operand.
xor: Mengembalikan true jika salah satu operand true tapi tidak keduanya.
Dengan menggunakan operator logika ini, kamu bisa membuat ekspresi logika kompleks yang sangat berguna dalam pengkondisian dan kontrol alur program





----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




Operator identitas dalam PHP digunakan untuk membandingkan dua nilai baik dari segi nilai maupun tipe data. Ada dua operator utama dalam kategori ini: === (identik) dan !== (tidak identik).

Operator Identitas
Identik (===)

Operator ini memeriksa apakah dua nilai adalah sama dan juga memiliki tipe data yang sama.
Contoh:
php
Salin kode
$a = 5;
$b = '5';
$c = 5;

var_dump($a === $b); // bool(false) - Karena $a adalah integer dan $b adalah string
var_dump($a === $c); // bool(true) - Karena $a dan $c keduanya adalah integer dengan nilai 5
Tidak Identik (!==)

Operator ini memeriksa apakah dua nilai adalah tidak sama atau memiliki tipe data yang berbeda.
Contoh:
php
Salin kode
$a = 5;
$b = '5';
$c = 5;

var_dump($a !== $b); // bool(true) - Karena $a adalah integer dan $b adalah string
var_dump($a !== $c); // bool(false) - Karena $a dan $c keduanya adalah integer dengan nilai 5
Contoh Penggunaan Operator Identitas dalam PHP
php
Salin kode
<?php
$a = 5;
$b = '5';
$c = 5;
$d = 10;

// Operator Identik (===)
echo "Apakah \$a identik dengan \$b? ";
var_dump($a === $b); // Output: bool(false)

echo "Apakah \$a identik dengan \$c? ";
var_dump($a === $c); // Output: bool(true)

echo "Apakah \$a identik dengan \$d? ";
var_dump($a === $d); // Output: bool(false)

// Operator Tidak Identik (!==)
echo "Apakah \$a tidak identik dengan \$b? ";
var_dump($a !== $b); // Output: bool(true)

echo "Apakah \$a tidak identik dengan \$c? ";
var_dump($a !== $c); // Output: bool(false)

echo "Apakah \$a tidak identik dengan \$d? ";
var_dump($a !== $d); // Output: bool(true)
?>
Penjelasan
=== (Identik): Membandingkan nilai dan tipe data. Jika kedua aspek ini sama, hasilnya adalah true.
!== (Tidak Identik): Membandingkan nilai dan tipe data. Jika salah satu atau kedua aspek ini berbeda, hasilnya adalah true.
Operator identitas ini sangat penting ketika tipe data memainkan peran penting dalam logika program, seperti ketika memproses input pengguna atau bekerja dengan berbagai tipe data dalam suatu aplikasi






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





Contoh Penggunaan Operator Perbandingan dalam PHP
php
Salin kode
<?php
$a = 5;
$b = 10;
$c = '5';

// Sama dengan
var_dump($a == $b); // bool(false)
var_dump($a == $c); // bool(true)

// Identik
var_dump($a === $c); // bool(false)

// Tidak sama dengan
var_dump($a != $b); // bool(true)
var_dump($a <> $b); // bool(true)

// Tidak identik
var_dump($a !== $c); // bool(true)

// Lebih besar
var_dump($b > $a); // bool(true)

// Lebih kecil
var_dump($a < $b); // bool(true)

// Lebih besar atau sama dengan
var_dump($a >= 5); // bool(true)
var_dump($b >= 5); // bool(true)

// Lebih kecil atau sama dengan
var_dump($a <= 5); // bool(true)
var_dump($a <= $b); // bool(true)
?>
Operator perbandingan ini sangat berguna dalam pengkondisian dan kontrol alur program, seperti dalam pernyataan if, while, for, dan lain-lain.

